openapi: 3.0.3
info:
  title: Digital Commerce - Checkout API
  description: "This is the API specification for the Digital Commerce Checkout API. It provides operations for:\n- Order capture with tokenised payment methods (credit cards, Apple Pay, Google Pay)\n- Order capture with stored payment methods (gift vouchers)\n- Cart validation and order creation\n- 3DS authentication flow support\n\n---\n# Endpoint Types:\n\nThe Checkout API includes two types of endpoints, each suited to different use cases:\n\n## 1. **Me API Endpoints:**\n  - *Purpose:* Designed for personalised customer experiences on websites.\n  - *Signature:* Includes `/me` in the URL.\n  - *Example:* `POST /me/token/capture` (Captures order for the authenticated user).\n  - *Access:* Requires an access token that identifies the specific user, including brand, market, and customer_nbr claims.\n  - *Use Case:* Ideal for checkout processes on e-commerce sites where customers manage their own orders.\n\n## 2. **Stateless API Endpoints (Per-Brand):**\n  - *Purpose:* Used for broader applications, such as call centres or backend services, where actions are performed on behalf of multiple customers.\n  - *Signature:* Includes `/in-brand/{brandkey}` in the URL.\n  - *Example:* `POST /in-brand/{brandkey}/token/capture` (Captures order within the specified brand).\n  - *Access:* Requires a higher authority token and is scoped per brand, identified by the `brandkey` path parameter.\n  - *Use Case:* Suitable for customer service representatives managing orders across different brands or for backend services handling multi-customer operations.\n\n---\n# Authorisation:\n\n## Getting Access Tokens\nAll Checkout API endpoints require OAuth 2.0 access tokens for authorisation:\n\n- **For RESTful API Access:** Contact the Curity OAuth Identity Server team for credentials and token endpoint details.\n\n## Token Requirements\n\n- **For `/me` Endpoints:**\n  - Guest users: Token must contain an anonymous identity claim\n  - Registered users: Token must contain a customer identity claim\n  \n- **For `/in-brand/{brandkey}` Endpoints:**\n  - Requires a service account token with appropriate scopes for the specified brand\n\n---\n# Concurrency Control:\n\nOrder capture is immutable: orders are created once and always have `version: 1`. Concurrency control today applies only to the cart you are checking out (via its `version` in the request, returning 409 if stale). A future Amendments API may allow post-checkout changes; then the order `version` will increment and be required for optimistic concurrency. Store it now; use `Idempotency-Key` (not `version`) for safe retries of the same capture request.\n\n---\n# AWS API Gateway Base Path Mapping:\n\n**Important:** AWS API Gateway automatically prefixes `/checkout` to all endpoint paths through its base path mapping feature. This means:\n- The paths defined in this specification (e.g., `/me/token/capture`) will be accessible as `/checkout/me/token/capture`\n- No manual `/checkout` prefix is needed in the OpenAPI specification paths\n\n---\n# Order Capture Process:\n\nThe Order Capture process involves two main steps:\n\n## 1. Business Validations\n- **Cart validation**: Item availability, delivery restrictions, cart state\n- **Amount matching**: Ensuring payment amounts match cart totals\n- **Customer validation**: Delivery address, customer status\n\n## 2. Payment Processing\n- **Tokenised payments**: Credit cards, Apple Pay, Google Pay (via existing Payments API)\n- **Stored payments**: Gift vouchers and other stored payment methods\n- **3DS handling**: Support for 3D Secure authentication flows\n\n## Order Object Design\n\nThe `Order` object is designed as an intuitive extension of the familiar `Cart` object:\n- **All Cart fields preserved**: lineItems, totalPrice, shippingInformation, etc.\n- **Added order status**: COMPLETED, FAILED, REQUIRES_3DS_VALIDATION\n- **Added payment details**: Shows exactly how the order was paid\n- **Same Money objects**: Consistent monetary formatting with Cart API\n\nThis approach makes orders immediately understandable - they're \"just carts that have been paid for\" with clear payment information.\n\n## Delivery Address Handling\n\n**Important:** Delivery address information must be configured within the Cart object before checkout. The Checkout API does not accept delivery address overrides.\n\n**Process Flow:**\n1. **Cart Setup**: Delivery address must be set on the cart using the Cart API\n2. **Address Validation**: Cart validates delivery restrictions and shipping options\n3. **Checkout**: Checkout API uses the delivery address from the cart\n4. **Order Creation**: Final order inherits all cart delivery information\n\nFor delivery address management, see the Cart API documentation.\n\n---\n# Checkout Validation Handling Guide\n\n## Understanding Checkout Validations\n\nThe Checkout API performs comprehensive business validations during order capture to ensure data integrity and business rule compliance. When validation issues occur, a `422 Business Validation Error` response is returned with detailed validation information.\n\n### Validation Categories\n\n**Order-Level Validations:** Issues affecting the entire checkout process\n- Cart state problems (not found, version mismatch, empty/locked)\n- Payment issues (amount mismatch, insufficient funds, declined)\n- Delivery restrictions\n\n**Line Item-Level Validations:** Issues with specific products\n- Stock availability (out of stock, insufficient quantity)\n- Product availability (discontinued, not saleable)\n- Compliance restrictions (regulatory, shipping limitations)\n- Quantity limits (exceeds maximum per order)\n\n### Client Implementation Guidelines\n\n**1. Process All Validations**\n```json\n{\n  \"orderLevel\": [\n    {\"code\": \"PaymentAmountMismatch\", \"message\": \"...\"}\n  ],\n  \"lineItemLevel\": [\n    {\"code\": \"ItemOutOfStock\", \"message\": \"...\", \"lineItemId\": \"abc123\"}\n  ]\n}\n```\n\n**2. Use Validation Codes for Localization**\n- **Recommended**: Use the `code` field to implement localized user messages\n- **Not Recommended**: Display the English `message` field directly to users\n- The `message` field is intended for developers and debugging\n\n**3. Present Issues by Category**\n- Group order-level issues as general checkout problems\n- Group line item-level issues by the affected products\n- Use `lineItemId` to map validations back to cart line items\n\n**4. Require Resolution Before Retry**\n- All validation issues must be resolved before resubmitting\n- Order is NOT created when validation errors occur\n- Users must take corrective action (adjust quantities, change address, etc.)\n\n### Common Integration Patterns\n\n**Handle Multiple Issues:**\n```javascript\nif (response.status === 422) {\n  const validations = response.data;\n\n  // Process order-level issues\n  validations.orderLevel.forEach(validation => {\n    displayOrderError(validation.code, validation.message);\n  });\n\n  // Process line item issues\n  validations.lineItemLevel.forEach(validation => {\n    displayLineItemError(validation.lineItemId, validation.code, validation.message);\n  });\n}\n```\n\n**Localization Example:**\n```javascript\nfunction getLocalizedMessage(validationCode) {\n  const messages = {\n    'ItemOutOfStock': t('checkout.errors.item_out_of_stock'),\n    'PaymentAmountMismatch': t('checkout.errors.payment_mismatch'),\n    // ... other codes\n  };\n  return messages[validationCode] || t('checkout.errors.generic');\n}\n```\n"
  contact:
    name: Direct Wines API Support
    email: apisupport@directwines.com
  license:
    name: Direct Wines Proprietary
    url: https://www.directwines.com
    x-notice: "This specification and all related materials are the exclusive property of Direct Wines and may not be used, copied, or distributed without explicit permission."
  version: 0.3.0
servers:
- url: https://virtserver.swaggerhub.com/Direct_Wines/checkout-api/0.3.0
  description: SwaggerHub API Auto Mocking
- url: https://prod.api.directwines.com/checkout
  description: Direct Wines - API Gateway - Production
- url: https://uat.api.directwines.com/checkout
  description: Direct Wines - API Gateway - UAT
- url: https://sit.api.directwines.com/checkout
  description: Direct Wines - API Gateway - SIT
tags:
- name: Personal Checkout API
  description: Operations for authenticated customers to checkout their own carts
- name: Stateless Checkout API
  description: Operations for agents and services to checkout carts on behalf of customers
- name: CORS
  description: Cross-Origin Resource Sharing support
paths:
  /me/token/capture:
    post:
      tags:
      - Personal Checkout API
      summary: Capture order for authenticated customer
      description: |
        Captures an order from a cart for the authenticated customer. This operation
        performs final business validations on the cart and processes payment using
        the provided payment methods.

        **Process Flow:**
        1. **Cart Validation**: Verifies cart state, item availability, delivery restrictions (using cart's delivery address)
        2. **Payment Processing**: Processes tokenised and/or stored payment methods
        3. **Order Creation**: Creates order with payment details, status, and delivery information from cart

        **Payment Methods Supported:**
        - **Tokenised**: Credit cards, Apple Pay, Google Pay (via Payments API)
        - **Stored**: Gift vouchers and other stored payment methods
        - **Multiple**: Can combine multiple payment methods (e.g., gift voucher + credit card)

        **3DS Support:**
        - If 3DS authentication is required, returns status `REQUIRES_3DS_VALIDATION`
        - Provides 3DS challenge URL for customer completion
        - Use Payments API `/3ds/validate-capture` endpoint to complete after 3DS

        **Address Handling:**
        - **Delivery Address**: Must be configured on the cart before checkout (no override supported)
        - **Billing Address**: Optional override for payment processing; defaults to delivery address if not provided
        - Cart API should be used to set and validate delivery address before checkout

        **Example usage:**

        `POST /checkout/me/token/capture`
      operationId: captureOrderForMe
      parameters:
      - name: Idempotency-Key
        in: header
        description: "Unique key to prevent duplicate transactions. This will be implemented by\nthe underlying PSP where supported.\n  A unique header that payment service providers (PSPs) use to detect and reject—or silently replay—the same unsafe request (e.g. POST /in-brand/{brandkey}/token/capture) within their retention window.\n\n  If the key has already been used:\n  • Many PSPs replay the original 2xx/4xx response.\n  • Some _(e.g. Worldline; Stripe when params differ)_ reply `409 Conflict`.\n\n  This guards against accidental double-charges on retries.\n  -  **Example (Cybersource suggestion):** `C12318814253057`.   _merchantIdLast4 + JulianDay + hhmmss + counter — 15 chars._\n  -  **Example (Worldline suggestion):**  \n    _Worldline expects any unique value (typically a UUID). Keys are kept for 24 h; a duplicate request replays the first response or returns `409 Conflict` if the initial call is still processing._\n  - **Any globally-unique value is valid**—you can just as easily send a UUID or another timestamp-based key—so long as you reuse the *same* value on every retry of the same request.\n\n  This is **not** to be confused with `version`, which enforces optimistic concurrency on API-managed resources such as carts or customers.\n"
        required: true
        schema:
          type: string
        example: C12318814253057
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutDraft"
            examples:
              single-tokenised-payment:
                summary: Single credit card payment
                value:
                  cartId: 3169811e-fa0a-789
                  version: 1
                  payments:
                  - type: tokenised
                    amount:
                      amount: 49.99
                      currencyCode: GBP
                    tokenisedPayment:
                      merchantId: YOUR_MID
                      paymentToken: tkn_abc123xyz
                      tokenType: TRANSIENT
                      billTo:
                        firstName: John
                        lastName: Doe
                        address1: 123 Main Street
                        city: London
                        postalCode: SW1A 1AA
                        country: GB
                        email: customer@example.com
              mixed-payment-methods:
                summary: Gift voucher + credit card payment
                value:
                  cartId: 3169811e-fa0a-789
                  version: 1
                  payments:
                  - type: stored
                    amount:
                      amount: 20.0
                      currencyCode: GBP
                    storedPayment:
                      paymentMethod: giftvoucher
                      giftVoucherDetails:
                        voucherCode: GV-2024-ABC123
                        pin: "1234"
                  - type: tokenised
                    amount:
                      amount: 29.99
                      currencyCode: GBP
                    tokenisedPayment:
                      merchantId: YOUR_MID
                      paymentToken: tkn_xyz789def
                      tokenType: TRANSIENT
                      billTo:
                        firstName: Jane
                        lastName: Smith
                        address1: 456 High Street
                        city: Manchester
                        postalCode: M1 1AA
                        country: GB
                        email: jane.smith@example.com
        required: true
      responses:
        "200":
          description: Order captured successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
              examples:
                completed-single-payment:
                  summary: Successfully completed order with single payment
                  value:
                    id: order-3169811e-fa0a-789
                    version: 1
                    status: COMPLETED
                    totalLineItems: 2
                    totalItemQuantity: 3
                    numberOfBottles: 36
                    totalListPrice:
                      amount: 57.97
                      currencyCode: GBP
                    totalPrice:
                      amount: 49.97
                      currencyCode: GBP
                    customerId: c1e2d3f4-5a6b-7c8d-9e0f-1a2b3c4d5e6f
                    responseCode: VAJ1C
                    paymentDetails:
                    - type: tokenised
                      amount:
                        amount: 49.97
                        currencyCode: GBP
                      status: completed
                      tokenisedPaymentResult:
                        transactionId: auth_12345678
                        authorisationCode: "123456"
                        merchantReference: YOUR_MID
                    createdAt: 2025-04-22T17:30:00Z
                    lastModifiedAt: 2025-04-22T17:30:00Z
                completed-mixed-payment:
                  summary: Successfully completed order with mixed payment methods
                  value:
                    id: order-3169811e-fa0a-456
                    version: 1
                    status: COMPLETED
                    totalLineItems: 1
                    totalItemQuantity: 2
                    numberOfBottles: 24
                    totalListPrice:
                      amount: 79.98
                      currencyCode: GBP
                    totalPrice:
                      amount: 69.98
                      currencyCode: GBP
                    customerId: c1e2d3f4-5a6b-7c8d-9e0f-1a2b3c4d5e6f
                    paymentDetails:
                    - type: stored
                      amount:
                        amount: 20.0
                        currencyCode: GBP
                      status: completed
                      storedPaymentResult:
                        paymentMethod: giftvoucher
                        transactionId: gv_txn_789123
                        remainingBalance:
                          amount: 15.0
                          currencyCode: GBP
                    - type: tokenised
                      amount:
                        amount: 49.98
                        currencyCode: GBP
                      status: completed
                      tokenisedPaymentResult:
                        transactionId: auth_87654321
                        authorisationCode: "654321"
                        merchantReference: YOUR_MID
                    createdAt: 2025-04-22T17:30:00Z
                    lastModifiedAt: 2025-04-22T17:30:00Z
                requires-3ds-validation:
                  summary: Order requires 3DS authentication
                  value:
                    id: order-3169811e-fa0a-321
                    version: 1
                    status: REQUIRES_3DS_VALIDATION
                    totalLineItems: 1
                    totalItemQuantity: 1
                    numberOfBottles: 6
                    totalListPrice:
                      amount: 180.0
                      currencyCode: EUR
                    totalPrice:
                      amount: 159.99
                      currencyCode: EUR
                    customerId: c1e2d3f4-5a6b-7c8d-9e0f-1a2b3c4d5e6f
                    paymentDetails:
                    - type: tokenised
                      amount:
                        amount: 159.99
                        currencyCode: EUR
                      status: requires_3ds
                      tokenisedPaymentResult:
                        transactionId: "7507655240516609704808"
                        threeDSUrl: https://3ds.psp.com/challenge/abc123
                        merchantReference: YOUR_MID
                    createdAt: 2025-04-22T17:30:00Z
                    lastModifiedAt: 2025-04-22T17:30:00Z
        "400":
          $ref: "#/components/responses/StructureError"
        "401":
          $ref: "#/components/responses/UnauthorisedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "409":
          description: |
            **Conflict Errors**

            409 errors occur when there are conflicts with the current state:
            - Cart version mismatch (optimistic concurrency control)
            - Duplicate idempotency key with different parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "422":
          $ref: "#/components/responses/BusinessError"
        "429":
          $ref: "#/components/responses/TooManyRequestsError"
        "500":
          $ref: "#/components/responses/InternalError"
      security:
      - GlobalAuthoriser: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWSRegion}:${ServiceAccountID}:function:dwaws-${Environment}-checkout-order-capture-lambda/invocations"
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Strict-Transport-Security: '''max-age=63072000; includeSubdomains'''
        passthroughBehavior: never
        httpMethod: POST
        type: aws_proxy
    options:
      tags:
      - CORS
      summary: Informs the clients which CORS methods are available and for what domains.
      description: |
        This operation is exposed for managing CORS with pre-flight requests sent by clients
        before order capture operation.

        **Example usage:**

        `OPTIONS /checkout/me/token/capture`
      operationId: captureOrderForMeOptions
      responses:
        "200":
          description: Options pre-flight request successfully acknowledged
          headers:
            Strict-Transport-Security:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/StructureError"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWSRegion}:${ServiceAccountID}:function:dwaws-${Environment}-checkout-order-capture-lambda/invocations"
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Strict-Transport-Security: '''max-age=63072000; includeSubdomains'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,Idempotency-Key'"
              method.response.header.Access-Control-Allow-Origin: '''None'''
        passthroughBehavior: never
        httpMethod: POST
        type: aws_proxy
      x-amazon-apigateway-auth:
        type: NONE
  /in-brand/{brandkey}/token/capture:
    post:
      tags:
      - Stateless Checkout API
      summary: Capture order within specified brand
      description: "Captures an order from a cart within the specified brand. This operation is intended\nfor authenticated agents acting on behalf of customers, such as call center \nrepresentatives or backend services.\n\n**Process Flow:**\n1. **Brand Validation**: Verifies brandkey and agent permissions\n2. **Cart Validation**: Verifies cart state, item availability, delivery restrictions (using cart's delivery address)\n3. **Payment Processing**: Processes tokenised and/or stored payment methods\n4. **Order Creation**: Creates order with payment details, status, and delivery information from cart\n\n**Payment Methods Supported:**\n- **Tokenised**: Credit cards, Apple Pay, Google Pay (via Payments API)\n- **Stored**: Gift vouchers and other stored payment methods\n- **Multiple**: Can combine multiple payment methods (e.g., gift voucher + credit card)\n\n**3DS Support:**\n- If 3DS authentication is required, returns status `REQUIRES_3DS_VALIDATION`\n- Provides 3DS challenge URL for customer completion\n- Use Payments API `/in-brand/{brandkey}/3ds/validate-capture` endpoint to complete after 3DS\n\n**Address Handling:**\n- **Delivery Address**: Must be configured on the cart before checkout (no override supported)\n- **Billing Address**: Optional override for payment processing; defaults to delivery address if not provided\n- Cart API should be used to set and validate delivery address before checkout\n\n**Example usage:**\n\n`POST /checkout/in-brand/uklait/token/capture`\n"
      operationId: captureOrderInBrand
      parameters:
      - name: brandkey
        in: path
        description: |
          Key of the brand.
        required: true
        schema:
          type: string
        examples:
          example-uk-brand:
            value: uklait
          example-us-brand:
            value: us4s
          example-au-brand:
            value: auwp
      - name: Idempotency-Key
        in: header
        description: "Unique key to prevent duplicate transactions. This will be implemented by\nthe underlying PSP where supported.\n  A unique header that payment service providers (PSPs) use to detect and reject—or silently replay—the same unsafe request (e.g. POST /in-brand/{brandkey}/token/capture) within their retention window.\n\n  If the key has already been used:\n  • Many PSPs replay the original 2xx/4xx response.\n  • Some _(e.g. Worldline; Stripe when params differ)_ reply `409 Conflict`.\n\n  This guards against accidental double-charges on retries.\n  -  **Example (Cybersource suggestion):** `C12318814253057`.   _merchantIdLast4 + JulianDay + hhmmss + counter — 15 chars._\n  -  **Example (Worldline suggestion):**  \n    _Worldline expects any unique value (typically a UUID). Keys are kept for 24 h; a duplicate request replays the first response or returns `409 Conflict` if the initial call is still processing._\n  - **Any globally-unique value is valid**—you can just as easily send a UUID or another timestamp-based key—so long as you reuse the *same* value on every retry of the same request.\n\n  This is **not** to be confused with `version`, which enforces optimistic concurrency on API-managed resources such as carts or customers.\n"
        required: true
        schema:
          type: string
        example: C12318814253057
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutDraft"
            examples:
              single-tokenised-payment:
                summary: Single credit card payment for call center
                value:
                  cartId: 3169811e-fa0a-456
                  version: 2
                  payments:
                  - type: tokenised
                    amount:
                      amount: 89.99
                      currencyCode: GBP
                    tokenisedPayment:
                      merchantId: YOUR_MID
                      paymentToken: tkn_callcenter123
                      tokenType: TRANSIENT
                      billTo:
                        firstName: Mary
                        lastName: Customer
                        address1: 456 Customer Street
                        city: Edinburgh
                        postalCode: EH1 1AA
                        country: GB
                        email: mary.customer@example.com
              mixed-payment-methods:
                summary: Gift voucher + credit card payment via agent
                value:
                  cartId: 3169811e-fa0a-456
                  version: 2
                  payments:
                  - type: stored
                    amount:
                      amount: 50.0
                      currencyCode: GBP
                    storedPayment:
                      paymentMethod: giftvoucher
                      giftVoucherDetails:
                        voucherCode: GV-2024-XYZ789
                        pin: "5678"
                  - type: tokenised
                    amount:
                      amount: 39.99
                      currencyCode: GBP
                    tokenisedPayment:
                      merchantId: YOUR_MID
                      paymentToken: tkn_agent456
                      tokenType: TRANSIENT
                      billTo:
                        firstName: David
                        lastName: Client
                        address1: 789 Client Road
                        city: Glasgow
                        postalCode: G1 1AA
                        country: GB
                        email: david.client@example.com
              backend-service-payment:
                summary: Automated backend service payment
                value:
                  cartId: 3169811e-fa0a-456
                  version: 3
                  payments:
                  - type: tokenised
                    amount:
                      amount: 125.0
                      currencyCode: EUR
                    tokenisedPayment:
                      merchantId: YOUR_MID
                      paymentToken: tkn_backend789
                      tokenType: STORED
                      billTo:
                        firstName: Service
                        lastName: Account
                        address1: 999 Service Ave
                        city: Dublin
                        postalCode: D01 1AA
                        country: IE
                        email: service@example.com
        required: true
      responses:
        "200":
          description: Order captured successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          $ref: "#/components/responses/StructureError"
        "401":
          $ref: "#/components/responses/UnauthorisedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "409":
          description: |
            **Conflict Errors**

            409 errors occur when there are conflicts with the current state:
            - Cart version mismatch (optimistic concurrency control)
            - Duplicate idempotency key with different parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "422":
          $ref: "#/components/responses/BusinessError"
        "429":
          $ref: "#/components/responses/TooManyRequestsError"
        "500":
          $ref: "#/components/responses/InternalError"
      security:
      - GlobalAuthoriser: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWSRegion}:${ServiceAccountID}:function:dwaws-${Environment}-checkout-order-capture-lambda/invocations"
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Strict-Transport-Security: '''max-age=63072000; includeSubdomains'''
        passthroughBehavior: never
        httpMethod: POST
        type: aws_proxy
    options:
      tags:
      - CORS
      summary: Informs the clients which CORS methods are available and for what domains.
      description: |
        This operation is exposed for managing CORS with pre-flight requests sent by clients
        before order capture operation.

        **Example usage:**

        `OPTIONS /checkout/in-brand/uklait/token/capture`
      operationId: captureOrderInBrandOptions
      parameters:
      - name: brandkey
        in: path
        description: |
          Key of the brand.
        required: true
        schema:
          type: string
        examples:
          example-uk-brand:
            value: uklait
          example-us-brand:
            value: us4s
          example-au-brand:
            value: auwp
      responses:
        "200":
          description: Options pre-flight request successfully acknowledged
          headers:
            Strict-Transport-Security:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/StructureError"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWSRegion}:${ServiceAccountID}:function:dwaws-${Environment}-checkout-order-capture-lambda/invocations"
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Strict-Transport-Security: '''max-age=63072000; includeSubdomains'''
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,Idempotency-Key'"
              method.response.header.Access-Control-Allow-Origin: '''None'''
        passthroughBehavior: never
        httpMethod: POST
        type: aws_proxy
      x-amazon-apigateway-auth:
        type: NONE
components:
  schemas:
    Address:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the customer.
          example: John
        lastName:
          type: string
          description: Last name of the customer.
          example: Doe
        address1:
          type: string
          description: Primary street address (address line 1).
          example: 123 Main Street
        city:
          type: string
          description: City or locality.
          example: London
        postalCode:
          type: string
          description: Postal or ZIP code.
          example: SW1A 1AA
        country:
          pattern: "^[A-Z]{2}$"
          type: string
          description: Two-letter ISO country code.
          example: GB
        email:
          type: string
          description: Customer email address.
          format: email
          example: customer@example.com
        phone:
          type: string
          description: Customer phone number.
          example: "+44123456789"
    CheckoutDraft:
      required:
      - cartId
      - payments
      - version
      type: object
      properties:
        cartId:
          type: string
          description: |
            The unique identifier of the cart to checkout.
            This cart must exist and be in a valid state for checkout.
          example: 3169811e-fa0a-789
        version:
          type: integer
          description: "Expected version of the Cart to checkout. If the expected version does not \nmatch the actual version, a 409 Conflict is returned.\n"
          format: int32
          example: 1
        payments:
          minItems: 1
          type: array
          description: |
            Array of payments to use for this order. The sum of all payment
            amounts must equal the cart total. Supports multiple payments
            (e.g., partial gift voucher + credit card).
          items:
            $ref: "#/components/schemas/Payment"
        billingAddress:
          $ref: "#/components/schemas/Address"
      description: |
        A CheckoutDraft represents the data required to capture an order from a cart.
        This includes cart identification, payment methods, and optional address overrides.

        **Billing Address**: The optional `billingAddress` field provides a billing address override.
        If not provided, the system uses the delivery address or customer profile address.
    Payment:
      required:
      - amount
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            Type of payment:
            - tokenised: Credit cards, Apple Pay, Google Pay (processed via Payments API)
            - stored: Gift vouchers and other stored payment methods.
          example: tokenised
          enum:
          - tokenised
          - stored
        amount:
          $ref: "#/components/schemas/Money"
        tokenisedPayment:
          $ref: "#/components/schemas/TokenisedPaymentDetails"
        storedPayment:
          $ref: "#/components/schemas/StoredPaymentDetails"
      description: |
        A payment instruction used for checkout. Can be either tokenised payments
        (credit cards, Apple Pay, Google Pay) or stored payments (gift vouchers).

        **Amount**: Amount to charge using this payment. The sum of all payment
        amounts must equal the cart total.

        **Tokenised Payment**: Tokenised payment details (required when type="tokenised").
        Uses the same structure as the Payments API TokenAuthoriseRequest.

        **Stored Payment**: Stored payment details (required when type="stored").
    TokenisedPaymentDetails:
      required:
      - billTo
      - merchantId
      - paymentToken
      - tokenType
      type: object
      properties:
        merchantId:
          type: string
          description: Unique merchant identifier assigned by the PSP.
          example: YOUR_MID
        paymentToken:
          type: string
          description: Payment token for processing.
          example: tkn_abc123xyz
        tokenType:
          type: string
          description: "Token type ('TRANSIENT' for single-use, 'STORED' for saved tokens)."
          example: TRANSIENT
          enum:
          - TRANSIENT
          - STORED
        setupRecurring:
          type: boolean
          description: Flag indicating if payment should set up a subscription for future recurring charges (only valid with transient tokens).
          example: false
        billTo:
          $ref: "#/components/schemas/Address"
        threeDSData:
          type: object
          additionalProperties: true
          description: 3DS authentication data from Payments API setup.
      description: |
        Tokenised payment details. This is a subset of the TokenAuthoriseRequest
        from the Payments API, containing the essential fields needed for checkout.

        **Bill To**: Billing address information.
    StoredPaymentDetails:
      required:
      - paymentMethod
      type: object
      properties:
        paymentMethod:
          type: string
          description: |
            Type of stored payment:
            - giftvoucher: Gift voucher payment.
          example: giftvoucher
          enum:
          - giftvoucher
        giftVoucherDetails:
          $ref: "#/components/schemas/GiftVoucherPaymentDetails"
      description: |
        Stored payment details. Currently supports gift vouchers,
        extensible for future stored payment types.

        **Gift Voucher Details**: Gift voucher payment details (required when paymentMethod="giftvoucher").
    GiftVoucherPaymentDetails:
      required:
      - voucherCode
      type: object
      properties:
        voucherCode:
          type: string
          description: Gift voucher code or identifier.
          example: GV-2024-ABC123
        pin:
          type: string
          description: Optional PIN or security code for the gift voucher.
          example: "1234"
      description: Gift voucher payment details.
    Order:
      required:
      - createdAt
      - id
      - paymentDetails
      - status
      - version
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the Order (was cartId in original cart).
          example: order-3169811e-fa0a-789
        version:
          type: number
          description: Current version of the Order.
          example: 1
        totalLineItems:
          type: number
          description: Total number of line items in the Order.
          example: 2
        totalItemQuantity:
          type: number
          description: Total quantity of line items in the Order.
          example: 3
        numberOfBottles:
          type: number
          description: Total number of bottles in the Order.
          example: 36
        lineItems:
          type: array
          description: List of line items in the Order (same structure as Cart).
          items:
            oneOf:
            - $ref: "#/components/schemas/LineItem"
            - $ref: "#/components/schemas/GiftVoucherLineItem"
        totalListPrice:
          $ref: "#/components/schemas/Money"
        lineItemSavings:
          $ref: "#/components/schemas/CartLineItemSavings"
        shippingInformation:
          $ref: "#/components/schemas/ShippingInformation"
        totalPrice:
          $ref: "#/components/schemas/Money"
        locationContext:
          $ref: "#/components/schemas/LocationContext"
        defaultFulfillmentContext:
          $ref: "#/components/schemas/DefaultFulfillmentContext"
        customerNbr:
          type: string
          description: Customer number associated with the Order.
          example: "13218264"
        customerId:
          type: string
          description: Customer ID associated with the Order.
          example: c1e2d3f4-5a6b-7c8d-9e0f-1a2b3c4d5e6f
        anonymousId:
          type: string
          description: Anonymous ID associated with the Order (for guest checkouts).
          example: d1e2d3f4-5a6b-7c8d-9e0f-1a2b3c4d5e6f
        responseCode:
          type: string
          description: Promo Code (Response Code) associated with the Order.
          example: VAJ1C
        cid:
          type: string
          description: Campaign ID (CID) associated with the Order.
          example: CM/123456
        status:
          type: string
          description: |
            Current status of the order:
            - COMPLETED: Order successfully completed and payment captured
            - FAILED: Order failed due to payment or business validation issues
            - REQUIRES_3DS_VALIDATION: Order requires 3DS authentication before completion.
          example: COMPLETED
          enum:
          - COMPLETED
          - FAILED
          - REQUIRES_3DS_VALIDATION
        paymentDetails:
          type: array
          description: "Array of payment methods used for this order. Shows exactly how the \norder was paid, including amounts and payment status for each method.\n"
          items:
            $ref: "#/components/schemas/OrderPaymentDetail"
        createdAt:
          type: string
          description: Date and time when the Order was created.
          format: date-time
          example: 2025-04-22T17:30:00Z
        lastModifiedAt:
          type: string
          description: Date and time when the Order was last modified.
          format: date-time
          example: 2025-04-22T17:30:00Z
      description: |
        An Order represents a completed checkout of a cart. It contains all the information
        from the original cart plus payment details and order status.

        **Order = Cart + Payment Details + Order Status**

        This design makes orders intuitive - they're "carts that have been paid for" with
        clear information about how the payment was processed.

        **Total List Price**: Total undiscounted price of all line items.

        **Total Price**: Final payable amount after all discounts (same as Cart).
    OrderPaymentDetail:
      required:
      - amount
      - status
      - type
      type: object
      properties:
        type:
          type: string
          description: Type of payment method used.
          example: tokenised
          enum:
          - tokenised
          - stored
        amount:
          $ref: "#/components/schemas/Money"
        status:
          type: string
          description: |
            Status of this specific payment:
            - completed: Payment successfully processed
            - failed: Payment failed or was declined
            - requires_3ds: Payment requires 3DS authentication.
          example: completed
          enum:
          - completed
          - failed
          - requires_3ds
        tokenisedPaymentResult:
          $ref: "#/components/schemas/TokenisedPaymentResult"
        storedPaymentResult:
          $ref: "#/components/schemas/StoredPaymentResult"
      description: |
        Details of a payment method used for an order, including the amount
        charged and the status of that specific payment.

        **Amount**: Amount charged using this payment method.

        **Tokenised Payment Result**: Results from tokenised payment processing (when type="tokenised").

        **Stored Payment Result**: Results from stored payment processing (when type="stored").
    TokenisedPaymentResult:
      type: object
      properties:
        transactionId:
          type: string
          description: Transaction ID from payment processor.
          example: auth_12345678
        authorisationCode:
          type: string
          description: Authorisation code from the issuing bank.
          example: "123456"
        threeDSUrl:
          type: string
          description: 3DS challenge URL (if status is requires_3ds).
          format: uri
          example: https://3ds.psp.com/challenge/abc123
        merchantReference:
          type: string
          description: Merchant reference for the payment.
          example: YOUR_MID
      description: Result details from tokenised payment processing.
    StoredPaymentResult:
      type: object
      properties:
        paymentMethod:
          type: string
          description: Type of stored payment method used.
          example: giftvoucher
          enum:
          - giftvoucher
        transactionId:
          type: string
          description: Transaction ID for the stored payment.
          example: gv_txn_789123
        remainingBalance:
          $ref: "#/components/schemas/Money"
      description: |
        Result details from stored payment processing.

        **Remaining Balance**: Remaining balance on gift voucher after payment (if applicable).
    CheckoutValidations:
      type: object
      properties:
        orderLevel:
          type: array
          description: |
            Validations that apply to the entire order (e.g., payment amount mismatches,
            delivery restrictions, cart state issues).
          items:
            $ref: "#/components/schemas/CheckoutValidationMessage"
        lineItemLevel:
          type: array
          description: |
            Validations that apply to specific line items (e.g., stock availability,
            compliance restrictions).
          items:
            $ref: "#/components/schemas/LineItemCheckoutValidation"
      description: |
        Contains validation results for checkout order capture that prevent successful completion.
        These validations indicate business rule violations discovered during order processing.

        The validations are categorized into two levels:
        1. **Order Level**: Validations that apply to the entire order (e.g., payment mismatches, delivery restrictions).
        2. **Line Item Level**: Validations that apply to specific line items (e.g., stock availability, compliance issues).

        > **IMPORTANT FOR CLIENT IMPLEMENTATIONS**: When validation errors occur, the order is NOT created.
        > Clients should present all validation issues to users and require resolution before resubmitting.
    CheckoutValidationMessage:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: |
            Language-neutral code that identifies this validation issue.

            **RECOMMENDED FOR LOCALIZATION**: API clients should use this code to implement localized
            messages in their applications. This approach enables clients to present validation messages
            appropriate to their users' languages and contexts.
          example: ItemOutOfStock
          x-enum-descriptions:
          - The specified cart does not exist or is not accessible to the current user
          - The cart version has changed since the checkout request was initiated
          - "The cart is in a state that prevents checkout (empty, locked, or invalid)"
          - The sum of payment amounts does not match the cart total
          - Delivery is not available to the specified delivery address
          - Insufficient funds available on gift voucher or stored payment method
          - Payment was declined by the payment processor or gateway
          - The line item is no longer available for purchase
          - The requested quantity exceeds the available stock for this item
          - The item cannot be sold due to regulatory or compliance restrictions
          - The requested quantity exceeds the maximum allowed per order for this item
          enum:
          - CartNotFound
          - CartVersionMismatch
          - InvalidCartState
          - PaymentAmountMismatch
          - DeliveryRestriction
          - InsufficientFunds
          - PaymentDeclined
          - ItemUnavailable
          - ItemOutOfStock
          - ComplianceRestriction
          - QuantityExceedsLimit
        message:
          type: string
          description: |
            Human-readable message explaining the validation issue (provided in English only).

            **NOTE**: While this property provides helpful context for developers and debugging,
            it is not intended for direct presentation to end users. API clients should use the
            `code` property to generate properly localized messages for their users.
          example: "Only 15 units of 'The Black Stump Durif Shiraz 2021' are available, but 24 were requested."
      description: |
        A validation message for checkout order capture containing both a language-neutral code and human-readable message.

        > **IMPORTANT FOR CLIENT IMPLEMENTATIONS**: API clients are strongly recommended to use the `code` property
        > for identifying and localizing validation messages in their applications. The `message` property is
        > primarily intended as a system message in English and should not be directly presented to end-users.

        ## Checkout Validation Codes

        The system uses standardized codes to indicate specific checkout validation issues:

        ### Order-Level Validation Codes
        | Code | Description |
        |------|-------------|
        | `CartNotFound` | The specified cart does not exist or is not accessible |
        | `CartVersionMismatch` | The cart version has changed since the checkout request was made |
        | `InvalidCartState` | The cart is in a state that prevents checkout (empty, locked, etc.) |
        | `PaymentAmountMismatch` | Payment amounts do not match cart total |
        | `DeliveryRestriction` | Delivery is not available to the specified address |
        | `InsufficientFunds` | Insufficient funds on gift voucher or stored payment method |
        | `PaymentDeclined` | Payment was declined by the payment processor |

        ### Line Item-Level Validation Codes
        | Code | Description |
        |------|-------------|
        | `ItemUnavailable` | The line item is no longer available for purchase |
        | `ItemOutOfStock` | The requested quantity exceeds available stock |
        | `ComplianceRestriction` | The item cannot be sold due to regulatory restrictions |
        | `QuantityExceedsLimit` | The requested quantity exceeds the maximum allowed for this item |

        These codes help clients implement appropriate handling for each validation scenario.
    LineItemCheckoutValidation:
      type: object
      description: |
        A validation message that applies to a specific line item in the checkout order.
      allOf:
      - $ref: "#/components/schemas/CheckoutValidationMessage"
      - required:
        - lineItemId
        type: object
        properties:
          lineItemId:
            type: string
            description: |
              ID of the line item to which this validation applies. This matches the
              line item ID from the original cart.
            example: e64c4dc9-ec1a-4d63-b96f-9ab1ac99f1a1
    ErrorMessageResponse:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          example: Unexpected error.
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorMessage"
    ErrorMessage:
      type: object
      properties:
        code:
          type: string
          example: UnexpectedError
        message:
          type: string
          example: Unexpected error.
        type:
          type: string
          example: subscriptions
        id:
          type: string
          description: A random ID that could be used to identify the error message in the logs
          example: 7c2e2694-aefe-43d7-888e-6a99514caaca
    Money:
      type: object
      properties:
        amount:
          type: number
          example: 12.99
        currencyCode:
          type: string
          example: GBP
      description: |
        This is a monetary amount with a currency code.
        This object is equivalent to the Commerce Tools [TypedMoney](https://docs.commercetools.com/api/types#typedmoney) object.
      example:
        amount: 12.99
        currencyCode: GBP
    LineItem:
      type: object
      properties:
        lineItemId:
          type: string
          description: Unique identifier of the Line Item.
          example: 72952-c278542528-h24828
        quantity:
          type: integer
          description: Quantity of the Line Item.
          example: 2
        itemType:
          type: string
          description: "Type of the line item (e.g., generic, wineplanFreeItem)."
          default: generic
          enum:
          - generic
          - wineplanFreeItem
        sku:
          $ref: "#/components/schemas/CartProductSku"
        unitPrice:
          $ref: "#/components/schemas/UnitPrice"
        effectiveUnitPrice:
          $ref: "#/components/schemas/Money"
        effectiveBottlePrice:
          $ref: "#/components/schemas/Money"
        discountedPricePerQuantity:
          type: array
          items:
            $ref: "#/components/schemas/DiscountedLineItemPriceForQuantity"
        totalPrice:
          $ref: "#/components/schemas/Money"
        savings:
          $ref: "#/components/schemas/LineItemSavings"
        itemClassifications:
          type: array
          items:
            type: string
            description: To Identify the lineItem classification.
            enum:
            - giftlineitem
            - wineplanFreeItem
            - upsell
            - depositItem
        classificationDetails:
          $ref: "#/components/schemas/ClassificationDetails"
      description: |
        A Line Item is a snapshot of a Product Variant at the time it is added to a Cart.

        There are two key ways to categorize line items:

        **itemType:**
        This indicates the type of product being added to the cart. In most cases (98%), this will be "generic" for standard wine products. Occasionally, specific types such as "giftVoucher" are required, as these products need additional details when added to the cart. Each line item can have only one type, effectively answering the question, "What kind of product is this?"

        **itemClassifications:**
        These are labels assigned to line items after they are added to the cart. For instance, if a promotion includes a free gift, it will be marked with a "giftlineitem" classification. A line item can have multiple classifications (or none), as these labels provide additional context about the item's special characteristics.

        ## Line Item Pricing:
        Line items use a sophisticated pricing model that considers multiple discount types:

        1. **Unit Price (`unitPrice`)**
           - Contains the base pricing information for a single unit
           - Includes:
             - `value`: The current selling price before cart discounts. The selling price is often the Standard Selling Price (SSP) but can also be a Volume Promotional Price (VPP) or Membership Promotional Price (MPP).
             - `listPrice`: The Direct Wines RRP (Recommended Retail Price)
             - `discounted`: Applied product-level discounts from Commerce Tools (rarely used as Direct Wines already use SSP, VPP or MPP for product-level discounts.)
             - `priceType`: Indicates the pricing method:
               - `rrp`: Recommended Retail Price
               - `ssp`: Standard Selling Price
               - `vpp`: Volume Promotional Price
               - `mpp`: Membership Promotional Price

        2. **Cart Discounts (`discountedPricePerQuantity`)**
           - Contains any cart-level promotional discounts
           - Shows the final discounted price after all cart promotions
           - Includes details about which specific discounts were applied
           - Example: "Summer Sipping Offer" or "Free Gift Promotion"

        3. **Total Price (`totalPrice`)**
           - The final price for all units of this line item after all discounts
           - Calculation: (Unit price - Product discounts - Cart discounts) × Quantity

        4. **Savings Summary (`savings`)**
           - `productDiscountSavings`: Per-unit savings from product-level pricing (e.g., ssp vs rrp)
           - `totalProductDiscountSavings`: Total product-level savings (per-unit savings × quantity)
           - `totalCartDiscountSavings`: Total savings from cart-level promotions
           - `totalSavings`: Combined savings from all discount types

        This object is essentially equivalent to the Commerce Tools [LineItem](https://docs.commercetools.com/api/carts-orders-overview#line-items-and-custom-line-items).
    CartProductSku:
      type: object
      properties:
        productName:
          type: array
          example:
          - key: en_AU
            value: The Black Stump Durif Shiraz 2021
          items:
            $ref: "#/components/schemas/LocaleData"
        productItemCode:
          type: string
          example: "0002421"
        itemCode:
          type: string
          example: C0002421
        numberOfBottles:
          type: number
          example: 12
      description: |
        This describes the summary information about the SKU and its associated parent Product, both of which are related to a LineItem.
        This object is essentially equivalent to a Commerce Tools [ProductVariant](https://docs.commercetools.com/api/projects/products#productvariant).
    LocaleData:
      type: object
      properties:
        key:
          type: string
          description: language name for the data
          enum:
          - en_AU
          - en_US
          - en_GB
          - en_NZ
          - en_TW
          - en_HK
          - zh_TW
          - zh_HK
        value:
          type: string
      description: This is the object to hold the locale specific data structure
    UnitPrice:
      type: object
      properties:
        value:
          $ref: "#/components/schemas/Money"
        discounted:
          $ref: "#/components/schemas/DiscountedUnitPrice"
        listPrice:
          $ref: "#/components/schemas/Money"
        priceType:
          type: string
          enum:
          - rrp
          - ssp
          - vpp
          - mpp
      description: |
        This represents the unit price of a `LineItem`.
        This object is an abbreviated equivalent of the CommerceTools [LineItem Price Representation](https://docs.commercetools.com/api/types#price).

        This object should be interpreted by a client as follows:
        - If the `discounted` property is set, a [ProductDiscount](https://docs.commercetools.com/api/projects/productDiscounts#ctp:api:type:ProductDiscount) has been applied, and the value within the `discounted` property is used.
        - Otherwise, the `value` property is used as the unit price for the [Line Item Price selection](https://docs.commercetools.com/api/carts-orders-overview#line-item-price-selection).

        The object additionally contains the following information:
        - `listPrice`: Direct Wines RRP (Recommended Retail Price) — this is a base price for all SKUs.
        - `priceType`: Indicates the pricing method applied for the `value` property:
          - `rrp`: Recommended Retail Price.
          - `ssp`: Standard Selling Price (defaults to RRP if no discount).
          - `vpp`: Volume Promotional Price (e.g., a discount applied for bulk purchases).
          - `mpp`: Membership Promotional Price (e.g., a discount applied for members).
    DiscountedUnitPrice:
      type: object
      properties:
        value:
          $ref: "#/components/schemas/Money"
        discountReason:
          type: string
      description: |
        This is the optional, discounted unit price of a LineItem.
    DiscountedLineItemPriceForQuantity:
      type: object
      properties:
        quantity:
          type: integer
          description: Quantity of the Line Item.
          example: 2
        discountedPrice:
          $ref: "#/components/schemas/DiscountedLineItemPrice"
      description: |
        This is the discounted unit price of a LineItem for a specific quantity.
        This object is equivalent to the Commerce Tools [DiscountedLineItemPriceForQuantity](https://docs.commercetools.com/api/projects/carts#discountedlineitempriceforquantity) object.
    DiscountedLineItemPrice:
      type: object
      properties:
        value:
          $ref: "#/components/schemas/Money"
        includedDiscounts:
          type: array
          items:
            $ref: "#/components/schemas/DiscountedLineItemPortion"
      description: |
        This records the discount that is applicable on a line item due to a matching cart discount.
        This object is equivalent to the Commerce Tools [DiscountedLineItemPrice](https://docs.commercetools.com/api/projects/carts#discountedlineitemprice) object.
    DiscountedLineItemPortion:
      type: object
      properties:
        discount:
          $ref: "#/components/schemas/CartDiscount"
        discountedAmount:
          $ref: "#/components/schemas/Money"
      description: |
        This is the summary information about a CartDiscount that has been applied to a LineItem.
        It is equivalent to the Commerce Tools [CartDiscount](https://docs.commercetools.com/api/projects/cartDiscounts#cartdiscount) object.
    CartDiscount:
      type: object
      properties:
        typeId:
          type: string
          example: cart-discount
        id:
          type: string
          example: 6c45d620-7cfe-496b-ae75-7107dce381e6
        name:
          type: string
          example: Summer Sipping Offer
      description: |
        This is the summary information about a CartDiscount that has been applied to a LineItem.
        It is equivalent to the Commerce Tools [CartDiscount](https://docs.commercetools.com/api/projects/cartDiscounts#cartdiscount) object.
    LineItemSavings:
      type: object
      properties:
        productDiscountSavings:
          type: number
          description: |
            The amount saved per unit due to Direct Wines product-level discounts, which are typically:
            - ssp-rrp (Standard Selling Price vs RRP)
            - vpp-rrp (Volume Promotional Price vs RRP)
            - mpp-rrp (Membership Promotional Price vs RRP)

            Additionally, promotional product discounts may be applied on top of the standard Direct Wines discount, though this is atypical.
            For a detailed pricing breakdown, see the `unitPrice` property on the LineItem object and also the confluence article [The Cart API Pricing Mechanism](https://direct-wines.atlassian.net/l/cp/0Z1UFwBq).
          example: 2.99
        totalProductDiscountSavings:
          type: number
          description: |
            The total amount saved from product-level discounts, calculated as `productDiscountSavings` multiplied by the item quantity.
          example: 10.99
        totalCartDiscountSavings:
          type: number
          description: |
            The total amount saved from cart-level discounts which target this line item.

            For a detailed pricing breakdown, see the `discountedPricePerQuantity` property on the LineItem object and also see the confluence article [The Cart API Pricing Mechanism](https://direct-wines.atlassian.net/l/cp/0Z1UFwBq).
          example: 11.99
        totalSavings:
          type: number
          description: |
            The total amount saved on this line item, combining both product-level and cart-level discounts.

            Calculated as: `totalProductDiscountSavings` + `totalCartDiscountSavings`

            This provides an easy way to display the total savings for a line item without having to sum the individual savings components.
          example: 22.98
      description: Summary information on savings applied to cart items.
    ClassificationDetails:
      type: object
      properties:
        upsell:
          $ref: "#/components/schemas/UpsellOfferDetails"
        depositInformation:
          $ref: "#/components/schemas/DepositInformation"
      description: |
        Additional metadata that provides context for specifically classified line items.
        This object is populated based on the values in the `itemClassifications` array:
        - When `upsell` is present: Contains details about the upsell offer, including the rule and type.
        - When `depositItem` is present: Contains details about deposit items, particularly for presell
          items in US carts. This includes the deposit type (currently only 'presellDeposit') and
          the associated product code that this deposit is a down payment for.
        The properties of this object directly correspond to the classification types they support.
    UpsellOfferDetails:
      type: object
      properties:
        type:
          type: string
          description: Type of upsell offer that is being offered.
          example: WINEPLAN
          enum:
          - WINEPLAN
          - SUBSCRIPTION
          - FILL_THE_CASE
        rule:
          type: string
          description: Name of the rule using which the offer item was retrieved.
          example: Hero Wines
      description: Details of the Upsell offer which needs to be passed as input for add to cart.
    DepositInformation:
      type: object
      properties:
        depositType:
          type: string
          description: |
            This value defines what type of deposit this is.
            Note, at the current time only one deposit type is supported, but it is likely that further types may be supported in the future.
          enum:
          - presellDeposit
        associatedItemCode:
          type: string
          description: |
            This is the associated product code, that this deposit is a down payment for.
            The caller should use the Product API to retrieve further details about this product.
      description: "This property is populated where the 'itemClassifications' property on the line item object, indicates that it is a Deposit for another product or service."
    GiftVoucherLineItem:
      allOf:
      - $ref: "#/components/schemas/LineItem"
      - required:
        - giftVoucherDetails
        - itemType
        type: object
        properties:
          itemType:
            type: string
            default: giftVoucher
            enum:
            - giftVoucher
          giftVoucherDetails:
            $ref: "#/components/schemas/GiftVoucherDetails"
        example:
          lineItemId: gv-987654
          quantity: 1
          itemType: giftVoucher
          totalPrice:
            currencyCode: USD
            centAmount: 5000
          giftVoucherDetails:
            recipientName: John Doe
            recipientEmail: john.doe@example.com
            message: "Happy Birthday, John! Enjoy your gift."
            value:
              amount: 0
              currencyCode: GBP
    GiftVoucherDetails:
      type: object
      properties:
        recipientName:
          type: string
          description: The name of the gift voucher recipient.
          example: Pam Smith
        recipientEmail:
          type: string
          description: The email address of the recipient.
          example: pam.smith@laithwaites.com
        message:
          type: string
          description: A personalized message for the recipient.
          example: "Thanks for all of your support, Pam"
        value:
          $ref: "#/components/schemas/Money"
      description: Details of the gift voucher purchase.
    CartLineItemSavings:
      type: object
      properties:
        totalProductDiscountSavings:
          type: number
          description: |
            Sum of all line items' product-level discount savings.
            This represents the total amount saved from Direct Wines product discounts across all items.
          example: 32
        totalCartDiscountSavings:
          type: number
          description: |
            Sum of all line items' cart-level discount savings.
            This represents the total amount saved from cart-level promotions across all items.
          example: 40
        totalSavings:
          type: number
          description: |
            Total savings across all items, combining both product and cart-level discounts.
            This is the sum of totalProductDiscountSavings and totalCartDiscountSavings.
          example: 72
      description: |
        Represents the total savings across all items in the cart. Each property is the sum
        of the corresponding values from individual line items' savings.
    ShippingInformation:
      type: object
      properties:
        shippingMethodName:
          type: string
          example: Standard Uk Shipping Method
        shippingMethodKey:
          type: string
          example: uk-std-shipping
        price:
          $ref: "#/components/schemas/Money"
        discountedPrice:
          $ref: "#/components/schemas/DiscountedShippingPrice"
      description: |
        This is the summary information about the shipping information of a Cart.
    DiscountedShippingPrice:
      type: object
      properties:
        discount:
          $ref: "#/components/schemas/ShipDiscount"
        discountedAmount:
          $ref: "#/components/schemas/Money"
      description: |
        This is the discounted shipping price of a Cart.
    ShipDiscount:
      type: object
      properties:
        typeId:
          type: string
          example: cart-discount
        id:
          type: string
          example: 6c45d620-7cfe-496b-ae75-7107dce381e6
        name:
          type: string
          example: Free Shipping greater than 200
      description: |
        This is the summary information about a ShipDiscount that has been applied to shipping.
    LocationContext:
      type: object
      properties:
        stateCode:
          type: string
          example: CA
        zipCode:
          type: string
          example: "93380"
        geographicType:
          type: string
          example: US
        mode:
          type: string
          description: Indicates which location identification method is being used.
          enum:
          - StateCode
          - ZipCode
      description: |
        This is the summary information about a Location Context of customer journey.
    DefaultFulfillmentContext:
      type: object
      properties:
        shippingSpeed:
          type: string
          description: |
            This tells about the Shipping Speed of the cart/order.
          example: Regular
          enum:
          - Regular
          - Fast
          - Faster
          - Fastest
        complianceType:
          type: string
          example: ThreeTier
          enum:
          - ThreeTier
          - WineryDirect
      description: |
        This is the summary information about a Fullfillment Context, describes details about how a shipping group
        within an order will be a fulfilled. This context is then used to inform the shopping journey for the customer.
  responses:
    StructureError:
      description: |-
        ## Structure / Format Errors

        A 400 is the most commonly expected error response and indicates that a request failed due to providing bad input. Some of the most common scenarios in which we see this error are listed below:

        * When missing a request body
        * When missing a path param or a query param
        * When missing a required field in the request body
        * When a string field in the request body is exceeding the max limit of 50 characters.
        * When a string field in the request body is shorter than the min length of 2 characters.
        * If we need a value from an ENUM and we receive something that doesn't match any of them.

        The error code received for this error is - `BadRequest`
      headers:
        Strict-Transport-Security:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessageResponse"
          examples:
            BadRequestError:
              $ref: "#/components/examples/BadRequestError"
    UnauthorisedError:
      description: |-
        ## Unauthorised

        A 401 indicates that the request is not properly authenticated. The error code returned in this scenario is `Unauthorised`.
      headers:
        Strict-Transport-Security:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessageResponse"
          examples:
            UnauthorisedError:
              $ref: "#/components/examples/UnauthorisedError"
    ForbiddenError:
      description: |-
        ## Forbidden

        A 403 indicates that the authenticated client is not allowed to perform the request. The error code returned in this scenario is `InsufficientPermissions`
      headers:
        Strict-Transport-Security:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessageResponse"
          examples:
            ForbiddenError:
              $ref: "#/components/examples/ForbiddenError"
    BusinessError:
      description: |-
        ## Business Validation Errors

        A 422 is returned when the checkout data is structurally correct but there are business validation
        issues that prevent order completion. The response contains detailed validation information organized
        by order-level and line item-level issues.

        ### Validation Structure
        - **Order Level**: Issues affecting the entire order (payment, delivery, cart state)
        - **Line Item Level**: Issues specific to individual line items (stock, compliance)

        ### Common Validation Scenarios
        **Order-Level Issues:**
        * `CartNotFound` - Cart does not exist or is not accessible
        * `CartVersionMismatch` - Cart was modified after checkout initiated
        * `InvalidCartState` - Cart is empty, locked, or invalid
        * `PaymentAmountMismatch` - Payment amounts don't match cart total
        * `DeliveryRestriction` - Delivery unavailable to specified address
        * `InsufficientFunds` - Insufficient gift voucher balance
        * `PaymentDeclined` - Payment declined by processor

        **Line Item Issues:**
        * `ItemUnavailable` - Item no longer available for purchase
        * `ItemOutOfStock` - Requested quantity exceeds available stock
        * `ComplianceRestriction` - Regulatory restrictions prevent sale
        * `QuantityExceedsLimit` - Quantity exceeds maximum allowed

        > **Client Implementation**: Process all validations and present issues to users for resolution before resubmitting.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CheckoutValidations"
          examples:
            single-order-validation:
              summary: Single order-level validation issue
              value:
                orderLevel:
                - code: PaymentAmountMismatch
                  message: Payment total of £45.99 does not match cart total of £49.99.
                lineItemLevel: []
            single-item-validation:
              summary: Single line item validation issue
              value:
                orderLevel: []
                lineItemLevel:
                - code: ItemOutOfStock
                  message: "Only 15 units of 'The Black Stump Durif Shiraz 2021' are available, but 24 were requested."
                  lineItemId: e64c4dc9-ec1a-4d63-b96f-9ab1ac99f1a1
            multiple-mixed-validations:
              summary: Multiple order and item validation issues
              value:
                orderLevel:
                - code: DeliveryRestriction
                  message: Express delivery is not available to postcodes in remote areas (AB12 3CD).
                - code: InsufficientFunds
                  message: Gift voucher balance of £25.00 is insufficient for requested payment of £30.00.
                lineItemLevel:
                - code: ItemOutOfStock
                  message: "Only 8 units of 'Château Margaux 2015' are available, but 12 were requested."
                  lineItemId: e64c4dc9-ec1a-4d63-b96f-9ab1ac99f1a1
                - code: ComplianceRestriction
                  message: This item cannot be shipped to Connecticut due to regulatory restrictions.
                  lineItemId: b23f4dc9-ec1a-4d63-b96f-9ab1ac99f1a2
            complex-validation-scenario:
              summary: Complex scenario with multiple item issues
              value:
                orderLevel:
                - code: CartVersionMismatch
                  message: "Cart version 2 expected, but current version is 3. Cart was modified after checkout initiated."
                lineItemLevel:
                - code: ItemUnavailable
                  message: Product 'Vintage Reserve Cabernet 2018' is no longer available for purchase.
                  lineItemId: c12f4dc9-ec1a-4d63-b96f-9ab1ac99f1a3
                - code: ItemOutOfStock
                  message: "Only 5 units of 'Premium Chardonnay 2020' are available, but 8 were requested."
                  lineItemId: d45f4dc9-ec1a-4d63-b96f-9ab1ac99f1a4
                - code: QuantityExceedsLimit
                  message: "Maximum 6 units per order allowed for 'Limited Edition Port 2010', but 10 were requested."
                  lineItemId: e67f4dc9-ec1a-4d63-b96f-9ab1ac99f1a5
    InternalError:
      description: |-
        ## Internal Server Error

        A 500 indicates that a request failed due to a server-side problem that needs to be resolved before subsequent
        requests can succeed. It either indicates a temporary unavailability or permanent server-side problem that needs
        to be reported and resolved.

        The following general error codes can appear in responses with the HTTP status code `500`:

        * `UnexpectedError`
          A server-side problem occurred that is not further specified.
          These errors [should be reported](apisupport@laithwaiteswine.com).
        * `DownstreamServiceFailure`
          A server-side problem occurred while trying to communicate with another microservice.
          These errors [should be reported](apisupport@laithwaiteswine.com).
      headers:
        Strict-Transport-Security:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessageResponse"
          examples:
            InternalError:
              $ref: "#/components/examples/InternalError"
            LambdaInvocationError:
              $ref: "#/components/examples/MicroserviceInvocationError"
    TooManyRequestsError:
      description: |-
        ## TooManyRequests Errors

        A 429 is returned when too many requests received by Checkout API beyond acceptable threshold.
  parameters:
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      description: "Unique key to prevent duplicate transactions. This will be implemented by\nthe underlying PSP where supported.\n  A unique header that payment service providers (PSPs) use to detect and reject—or silently replay—the same unsafe request (e.g. POST /in-brand/{brandkey}/token/capture) within their retention window.\n\n  If the key has already been used:\n  • Many PSPs replay the original 2xx/4xx response.\n  • Some _(e.g. Worldline; Stripe when params differ)_ reply `409 Conflict`.\n\n  This guards against accidental double-charges on retries.\n  -  **Example (Cybersource suggestion):** `C12318814253057`.   _merchantIdLast4 + JulianDay + hhmmss + counter — 15 chars._\n  -  **Example (Worldline suggestion):**  \n    _Worldline expects any unique value (typically a UUID). Keys are kept for 24 h; a duplicate request replays the first response or returns `409 Conflict` if the initial call is still processing._\n  - **Any globally-unique value is valid**—you can just as easily send a UUID or another timestamp-based key—so long as you reuse the *same* value on every retry of the same request.\n\n  This is **not** to be confused with `version`, which enforces optimistic concurrency on API-managed resources such as carts or customers.\n"
      required: true
      schema:
        type: string
      example: C12318814253057
  examples:
    BadRequestError:
      value:
        statusCode: 400
        message: The server cannot process the request
        errors:
        - code: BadRequest
          message: The server cannot process the request
          type: subscriptions
          id: 9ef39190-7533-11ec-90d6-0242ac129023hj
    UnauthorisedError:
      value:
        statusCode: 401
        message: The user is not authorised to access this resource
        errors:
        - code: Unauthorised
          message: The user is not authorised to access this resource
          type: subscriptions
          id: 45d36788-752f-11ec-90d6-0242ac12073u2
    ForbiddenError:
      value:
        statusCode: 403
        message: The user has no permissions to access this resource
        errors:
        - code: Forbidden
          message: The user has no permissions to access this resource
          type: subscriptions
          id: e6828836-752e-11ec-90d6-0242ac1298u3
    InternalError:
      value:
        statusCode: 500
        message: Internal Server Error
        errors:
        - code: InternalError
          message: Internal Server Error
          type: subscriptions
          id: v87185a-7530-11ec-90d6-0242ac12j823
    MicroserviceInvocationError:
      value:
        statusCode: 500
        message: Could not access Scheme Master definition
        errors:
        - code: DownstreamServiceFailure
          message: Could not access Scheme Master definition
          type: subscriptions
          id: e6828836-752e-11ec-90d6-0242ac1298u3
  securitySchemes:
    GlobalAuthoriser:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        type: request
        authorizerUri: "arn:aws:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWSRegion}:${CIDMAccountID}:function:dwaws-${CIDMEnvironment}-cidm-global-authoriser-lambda/invocations"
        authorizerCredentials: "arn:aws:iam::${ApiAccountID}:role/dwaws-${CIDMEnvironment}-cidm-globalauthorizer-execution-iam-role"
        authorizerResultTtlInSeconds: 300
        identitySource: method.request.header.Authorization
x-amazon-apigateway-request-validators:
  request-body-only:
    validateRequestBody: true
    validateRequestParameters: false
  params-only:
    validateRequestBody: false
    validateRequestParameters: true
  full:
    validateRequestBody: true
    validateRequestParameters: true
x-amazon-apigateway-request-validator: full
x-amazon-apigateway-gateway-responses:
  BAD_REQUEST_BODY:
    statusCode: "400"
    responseParameters:
      gatewayresponse.header.x-dw-correlation-id: method.request.header.x-dw-correlation-id
      gatewayresponse.header.Strict-Transport-Security: '''max-age=63072000; includeSubdomains'''
    responseTemplates:
      application/json: "{\n \"errors\" : [ \n { \n \"code\" : \"BadRequest\", \n \"message\" : \"$context.error.validationErrorString\", \n \"type\":  \"$context.error.responseType\", \n \"id\": \"Please check the correlation id in the response header\" } \n ], \n   \"statusCode\": 400,\n\"message\" : \"$context.error.message\"}"
  BAD_REQUEST_PARAMETERS:
    statusCode: "400"
    responseParameters:
      gatewayresponse.header.x-dw-correlation-id: method.request.header.x-dw-correlation-id
      gatewayresponse.header.Strict-Transport-Security: '''max-age=63072000; includeSubdomains'''
    responseTemplates:
      application/json: "{\n \"errors\" : [ \n { \n \"code\" : \"BadRequest\", \n \"message\" : \"$context.error.message\", \n \"type\":  \"$context.error.responseType\", \n \"id\": \"Please check the correlation id in the response header\" } \n ], \n   \"statusCode\": 400,\n \"message\" : \"$context.error.message\" \n}"
  UNAUTHORIZED:
    statusCode: "401"
    responseParameters:
      gatewayresponse.header.x-dw-correlation-id: method.request.header.x-dw-correlation-id
      gatewayresponse.header.Strict-Transport-Security: '''max-age=63072000; includeSubdomains'''
    responseTemplates:
      application/json: "{\n \"errors\" : [ \n { \n \"code\" : \"Unauthorised\", \n \"message\" : \"The user is not authorised to access this resource\", \n \"type\":  \"Forbidden\", \n \"id\": \"Please check the correlation id in the response header\" \n } \n ], \n   \"statusCode\": 401,\n \"message\" : \"The user is not authorised to access this resource\" \n}"
  ACCESS_DENIED:
    statusCode: "403"
    responseParameters:
      gatewayresponse.header.x-dw-correlation-id: method.request.header.x-dw-correlation-id
      gatewayresponse.header.Strict-Transport-Security: '''max-age=63072000; includeSubdomains'''
    responseTemplates:
      application/json: "{\n \"errors\" : [ \n { \n \"code\" : \"InsufficientPermissions\", \n \"message\" : \"The user has no permissions to access this resource\", \n \"type\":  \"Forbidden\", \n \"id\": \"Please check the correlation id in the response header\" \n } \n ], \n   \"statusCode\": 403,\n \"message\" : \"The user has no permissions to access this resource\" \n}"
  UNSUPPORTED_MEDIA_TYPE:
    statusCode: "415"
    responseParameters:
      gatewayresponse.header.x-dw-correlation-id: method.request.header.x-dw-correlation-id
      gatewayresponse.header.Strict-Transport-Security: '''max-age=63072000; includeSubdomains'''
    responseTemplates:
      application/json: "{\n \"errors\" : [ \n { \n \"code\" : \" UnsupportedContent\", \n \"message\" : \"The content header sent is not supported\", \n \"type\":  \"Application Error\", \n \"id\": \"Please check the correlation id in the response header\" \n } \n ], \n   \"statusCode\": 415,\n \"message\" : \"The content header sent is not supported\" \n}"
  DEFAULT_4XX:
    statusCode: "404"
    responseParameters:
      gatewayresponse.header.x-dw-correlation-id: method.request.header.x-dw-correlation-id
      gatewayresponse.header.Strict-Transport-Security: '''max-age=63072000; includeSubdomains'''
    responseTemplates:
      application/json: "{\n \"errors\" : [ \n { \n \"code\" : \"NotFound\", \n \"message\" : \"Invalid Path requested\", \n \"type\":  \"NOT_FOUND\", \n \"id\": \"Please check the correlation id in the response header\" \n } \n ], \n   \"statusCode\": 404,\n \"message\" : \"Invalid Path requested\" \n}"

